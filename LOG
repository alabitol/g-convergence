Authors:     g-coders 
Created:     February 21, 2012
Revised:     March 11, 2012
Description: This is where we keep log of our weekly progress on the project.
*******************************************************************************

Week 1:

Initially, we were going to implement the web server portion of our notary
ourselves using by using sockets and pthread. After a while, it became
apparent that we would be duplicating a lot of functionality that has
already been implemented before and is available for use via a C
library. After a little bit of searching we found that libmicrohttpd provides
exactly what we are looking for. Thus, we decided to use this library in our
project to provide the functionality of a web server. 

First, we proceeded to learn about how to use this library by stepping
through tutorial available at 

www.gnu.org/software/libmicrohttpd/tutorial.html

We established that we were going to have a meeting of the entire group on
Sunday and also meet once or twice during the week in smaller groups to pair
program and discuss specific implementation issues.


Week 2:

We decided that we wanted to use the prototype+extensions development
methodology, so after learning about libmicrohttpd from the tutorial, we wrote
stubs of the most high-level functions that we need to provide the essential
functionality of the Convergence server. Once we determined all the high level
functions that we necessarily needed, we split the implementation of
functions in individual files among ourselves keeping in mind the advantages
of pair programming and code review.

We also found it useful to create a UML diagram to help us visualize the
role of various components in the project and the interactions between them.

Finally, we created a central repository on Github, which we each cloned in
our individual accounts. We decided that each of us is going to have pull and
push privileges to this repository.


Week 3:

After we decided on the structure of the system, we began implementing the
functions that we specified. Many of our implementation choices were
determined by libmicrohttpd library which mandates a particular sequence and
structure of server operations. Thus, in our implementation we drew
inspiration from examples in the tutorial examples we found on the
libmicrohttpd website. 

We spent considerable amount of time plowing through the documentation and
server examples to understand how to properly use various library functions.


Week 4:

It is high time to begin writing tests for the entire system as well as unit
tests for individual functions. For this purpose we created a file called
notary-test.c, in which we will perform all the tests.

Initially, we wrote unit tests for functions which do not do not depend on
libmicrohttpd functions, which are included in certificate.c. It will be more
difficult to test those functions that do because we will need to determine
how to construct input to these functions, which is otherwise the
responsibility of microhttpd library.

Week 5:

We need to convert the formatting of our documentation to Doxygen compatible
formatting. Matt will be responsible for making these changes.

Week 6:

We have implmented more unit tests.

Week 7:

We have begun to implement cache and test_send_response.

Week 8:

Radhika and Chase have been working hard on implementing the cache. We cache
functions are now implemented- we only need to verify that they are working
with the appropriate C mysql library. 

Zach has finished writing a script that configures the notary. This script creates
notary's private key and certificate if they does not exist. Afterwards, it
signs the certificate with the notary's private key which concludes the
configuration process.

Tolu and Martin have finished implementing test_send_response, which now
verifies that send response functions appropriately in 4 different client
requests.

In MySQL database convergence, which Dr. Stone set up on babbage I created
tables trusted and blacklisted for our notary system using the following commands:

mysql> create table trusted(url VARCHAR(255) NOT NULL, fingerprint VARCHAR(60)
NOT NULL, timestamp TIMESTAMP, PRIMARY KEY (url));

mysql> create table blacklisted (url VARCHAR(255) NOT NULL, timestamp
TIMESTAMP, PRIMARY KEY (url));
